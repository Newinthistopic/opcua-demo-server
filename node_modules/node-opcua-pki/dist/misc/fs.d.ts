/// <reference types="node" />
import { IFs } from "memfs";
import { EventEmitter } from "node:events";
export declare const writeFileSync: (id: import("memfs/lib/volume").TFileId, data: import("memfs/lib/volume").TData, options?: import("memfs/lib/volume").IWriteFileOptions | undefined) => void;
export declare const writeFile: {
    (id: import("memfs/lib/volume").TFileId, data: import("memfs/lib/volume").TData, callback: import("memfs/lib/volume").TCallback<void>): any;
    (id: import("memfs/lib/volume").TFileId, data: import("memfs/lib/volume").TData, options: string | import("memfs/lib/volume").IWriteFileOptions, callback: import("memfs/lib/volume").TCallback<void>): any;
};
export declare const existsSync: (path: import("fs").PathLike) => boolean;
export declare const readFileSync: (file: import("memfs/lib/volume").TFileId, options?: string | import("memfs/lib/volume").IReadFileOptions | undefined) => import("memfs/lib/encoding").TDataOut;
export declare const unlink: (path: import("fs").PathLike, callback: import("memfs/lib/volume").TCallback<void>) => void;
export declare const mkdirSync: (path: import("fs").PathLike, options?: import("memfs/lib/volume").TMode | import("memfs/lib/volume").IMkdirOptions | undefined) => void;
export declare const rename: (oldPath: import("fs").PathLike, newPath: import("fs").PathLike, callback: import("memfs/lib/volume").TCallback<void>) => void;
export declare const createWriteStream: (path: import("fs").PathLike, options?: string | import("memfs/lib/volume").IWriteStreamOptions | undefined) => import("memfs/lib/volume").IWriteStream;
export declare type FileSystem = IFs;
export interface FSWatcher extends EventEmitter {
    /** */
    close(): void;
}
export interface Stats {
    /** */
    a: number;
}
export declare const promises: import("memfs/lib/promises").IPromisesAPI;
